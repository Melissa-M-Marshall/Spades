# This program will have 4 computer-generated players playing a game of spades to the score of 500. THere are no special rules included.
import random

class Player:
  # This function instantiates the object.
  def __init__(self):
    self.hand=[]
    self.number_of_tricks = 0
    self.number_of_overtricks = 0
    self.bid = 0
    self.score = 0
    
  # This function will build the cards in the player's hand.
  def add_card(self, additional_card):
    self.hand.append(additional_card)
    self.hand.sort()
    
  #This function will decide the bid the computer will use.
  def decide_bid(self):
    n = 0
    while n < 13:
      if (self.hand[n] >= 10) and (self.hand[n] <= 12):
        self.bid += 1
      elif (self.hand[n] >= 23) and (self.hand[n] <= 25):
        self.bid += 1
      elif (self.hand[n] >= 36) and (self.hand[n] <= 38):
        self.bid += 1
      elif (self.hand[n] >= 49) and (self.hand[n] <= 51):
        self.bid += 1
      n += 1
      
  # This function will handle the computer being the first to play a card.
  def first_play(self):
    if 12 in self.hand:
      self.hand.remove(12)
      return 12
    elif 25 in self.hand:
      self.hand.remove(25)
      return 25
    elif 38 in self.hand:
      self.hand.remove(38)
      return 38
    else:
      self.hand.sort()
      card = self.hand.pop(0)
      return card
      
  # This function will determine if a spade has been played.
  def spade_played(self, cards):
    number_of_cards = len(cards)
    while number_of_cards > 0:
      if cards[number_of_cards-1] > 38:
        return True
      else:
        return False
        
  # These functions will determine if the player has the correct suit for a follow up play.
  def have_hearts(self):
    n = 0
    number_of_cards = len(self.hand)
    while n < number_of_cards:
      if self.hand[n] < 13:
        return True
      n += 1
    return False
  def have_diamonds(self):
    n = 0
    number_of_cards = len(self.hand)
    while n < number_of_cards:
      if (self.hand[n] > 12) and (self.hand[n] < 26):
        return True
      n += 1
    return False
  def have_clubs(self):
    n = 0
    number_of_cards = len(self.hand)
    while n < number_of_cards:
      if (self.hand[n] > 25) and (self.hand[n] < 39):
        return True
      n += 1
    return False
  def have_spades(self):
    n = 0
    number_of_cards = len(self.hand)
    while n < number_of_cards:
      if (self.hand[n] > 38) and (self.hand[n] < 52):
        return True
      n += 1
    return False
    
  # This function will determine what suit is needed for a play.
  def required_suit(self,cards):
    if cards[0] < 13:
      suit = "hearts"
    elif (cards[0] > 12) and (cards[0] < 26):
      suit = "diamonds"
    elif (cards[0] > 25) and (cards[0] < 39):
      suit = "clubs"
    else:
      suit = "spades"
    return suit
    
  # This function will determine if it is necessary to use a spade.
  def use_spade(self,cards):
    suit = self.required_suit(cards)
    if not self.have_spades():
      return False
    elif suit == "hearts" and not self.have_hearts():
      return True
    elif suit == "diamonds" and not self.have_diamonds():
      return True
    elif suit == "clubs" and not self.have_clubs():
      return True
    elif suit == "spades":
      return True
    else:
      return False
      
  # This function is used to narrow down what cards should be played in a round. The greatest value will come first, the least value last.
  def gather_cards_of_correct_suit(self, cards):
    useful_cards = []
    my_number_of_cards = len(self.hand)
    suit_to_use = self.required_suit(cards)
    if self.use_spade(cards):
      while my_number_of_cards >= 0:
        if (self.hand[my_number_of_cards-1] > 38) and (self.hand[my_number_of_cards-1] < 52 ):
          useful_cards.append(self.hand[my_number_of_cards-1])
        my_number_of_cards -= 1
      return useful_cards
    elif suit_to_use == "hearts" and self.have_hearts():
      while my_number_of_cards >= 0:
        if self.hand[my_number_of_cards-1] < 13:
          useful_cards.append(self.hand[my_number_of_cards-1])
        my_number_of_cards -= 1
      return useful_cards
    elif suit_to_use == "diamonds" and self.have_diamonds():
      while my_number_of_cards >= 0:
        if (self.hand[my_number_of_cards-1] < 26) and (self.hand[my_number_of_cards-1] > 12):
          useful_cards.append(self.hand[my_number_of_cards-1])
        my_number_of_cards -= 1
      return useful_cards
    elif suit_to_use == "clubs" and self.have_clubs():
      while my_number_of_cards >= 0:
        if (self.hand[my_number_of_cards-1] < 39) and (self.hand[my_number_of_cards-1] > 25):
          useful_cards.append(self.hand[my_number_of_cards-1])
        my_number_of_cards -= 1
      return useful_cards
    else:
      while my_number_of_cards >= 0:
        if (self.hand[my_number_of_cards-1] < 52) and (self.hand[my_number_of_cards-1] > 38):
          useful_cards.append(self.hand[my_number_of_cards-1])
        my_number_of_cards -= 1
      return useful_cards
      
  # This function will handle playing a card in response to another.
  def response_play(self, cards):
    useful_cards = self.gather_cards_of_correct_suit(cards)
    number_of_cards_played = len(cards)
    number_of_useful_cards = len(useful_cards)
    while number_of_cards_played > 0:
      # Account for lack of useful cards
      if number_of_useful_cards == 0:
        card_to_use = self.hand[0]
      # Account for the spades
      elif self.use_spade(cards):
        if useful_cards[0] > cards[number_of_cards_played-1]:
          card_to_use = useful_cards[0]
        else:
          card_to_use = useful_cards[number_of_useful_cards - 1]
      # Handle the rest.
      elif self.spade_played(cards):
        card_to_use = useful_cards[number_of_useful_cards-1]
      else:
        if useful_cards[0] > cards[number_of_cards_played-1]:
          card_to_use = useful_cards[0]
        else:
          card_to_use = useful_cards[number_of_useful_cards-1]
      number_of_cards_played -= 1
    self.hand.remove(card_to_use)
    return card_to_use
    
  # This function will increase the tricks of the player.
  def add_trick(self):
    self.number_of_tricks += 1
    
  # This function will determine if the player reached their bid, and if there were any overtricks.
  def reach_bid(self):
    if self.number_of_tricks >= self.bid:
      if self.number_of_tricks > self.bid:
        self.number_of_overtricks = self.number_of_tricks - self.bid
      return True
    else:
      return False
      
  # This function will add the score earned by the player to the score.
  def add_score(self):
    if self.reach_bid:
      score = (self.bid * 10) + (self.number_of_overtricks)
    self.score += score

# This function allows the program to grab a random number for generating the hands.
def getRandomNumber(maximum):
  number = random.randint(0,maximum)
  return number

# This function will create the hands of each of the players.  
def create_hand(player, card_deck):
  cards = 0
  number = 0
  while cards < 13:
    number = getRandomNumber(51)
    if number in card_deck:
      player.add_card(number)
      cards += 1
      card_deck.remove(number)

# This function will estsblish the card deck used.
def create_card_deck():
  n=0
  card_deck = []
  while n < 52:
    card_deck.append(n)
    n += 1
  return card_deck

# This function will print the cards the players have in card deck notation.
def print_hand(player_hand):
  n = 0
  hand = []
  value = "?"
  while n < 13:
    if player_hand[n] < 13:
      if player_hand[n] == 0:
        value = "2 of hearts"
      elif player_hand[n] == 1:
        value = "3 of hearts"
      elif player_hand[n] == 2:
        value = "4 of hearts"
      elif player_hand[n] == 3:
        value = "5 of hearts"
      elif player_hand[n] == 4:
        value = "6 of hearts"
      elif player_hand[n] == 5:
        value = "7 of hearts"
      elif player_hand[n] == 6:
        value = "8 of hearts"
      elif player_hand[n] == 7:
        value = "9 of hearts"
      elif player_hand[n] == 8:
        value = "10 of hearts"
      elif player_hand[n] == 9:
        value = "J of hearts"
      elif player_hand[n] == 10:
        value = "Q of hearts"
      elif player_hand[n] == 11:
        value = "K of hearts"
      else:
        value = "A of hearts"
    elif player_hand[n] < 26:
      if (player_hand[n] - 13) == 0:
        value = "2 of diamonds"
      elif (player_hand[n] - 13) == 1:
        value = "3 of diamonds"
      elif (player_hand[n] - 13) == 2:
        value = "4 of diamonds"
      elif (player_hand[n] - 13) == 3:
        value = "5 of diamonds"
      elif (player_hand[n] - 13) == 4:
        value = "6 of diamonds"
      elif (player_hand[n] - 13) == 5:
        value = "7 of diamonds"
      elif (player_hand[n] - 13) == 6:
        value = "8 of diamonds"
      elif (player_hand[n] - 13) == 7:
        value = "9 of diamonds"
      elif (player_hand[n] - 13) == 8:
        value = "10 of diamonds"
      elif (player_hand[n] - 13) == 9:
        value = "J of diamonds"
      elif (player_hand[n] - 13) == 10:
        value = "Q of diamonds"
      elif (player_hand[n] - 13) == 11:
        value = "K of diamonds"
      else:
        value = "A of diamonds"
    elif player_hand[n] < 39:
      if (player_hand[n] - 26) == 0:
        value = "2 of clubs"
      elif (player_hand[n] - 26) == 1:
        value = "3 of clubs"
      elif (player_hand[n] - 26) == 2:
        value = "4 of clubs"
      elif (player_hand[n] - 26) == 3:
        value = "5 of clubs"
      elif (player_hand[n] - 26) == 4:
        value = "6 of clubs"
      elif (player_hand[n] - 26) == 5:
        value = "7 of clubs"
      elif (player_hand[n] - 26) == 6:
        value = "8 of clubs"
      elif (player_hand[n] - 26) == 7:
        value = "9 of clubs"
      elif (player_hand[n] - 26) == 8:
        value = "10 of clubs"
      elif (player_hand[n] - 26) == 9:
        value = "J of clubs"
      elif (player_hand[n] - 26) == 10:
        value = "Q of clubs"
      elif (player_hand[n] - 26) == 11:
        value = "K of clubs"
      else:
        value = "A of clubs"
    else:
      if (player_hand[n] - 39) == 0:
        value = "2 of spades"
      elif (player_hand[n] - 39) == 1:
        value = "3 of spades"
      elif (player_hand[n] - 39) == 2:
        value = "4 of spades"
      elif (player_hand[n] - 39) == 3:
        value = "5 of spades"
      elif (player_hand[n] - 39) == 4:
        value = "6 of spades"
      elif (player_hand[n] - 39) == 5:
        value = "7 of spades"
      elif (player_hand[n] - 39) == 6:
        value = "8 of spades"
      elif (player_hand[n] - 39) == 7:
        value = "9 of spades"
      elif (player_hand[n] - 39) == 8:
        value = "10 of spades"
      elif (player_hand[n] - 39) == 9:
        value = "J of spades"
      elif (player_hand[n] - 39) == 10:
        value = "Q of spades"
      elif (player_hand[n] - 39) == 11:
        value = "K of spades"
      else:
        value = "A of spades"
    hand.append(value)
    n += 1
  return hand

# This function will determine which card was the highest value.
def greatest_card_played(cards_played):
  n=0
  temporary = 0
  greatest = 0
  while n < 4:
    if cards_played[n] > temporary:
      greatest = cards_played[n]
    n += 1
  return greatest

# This function will determine which player won the round.
def win_trick(first_player, cards_played):
  winning_card = greatest_card_played(cards_played)
  location = cards_played.index(winning_card)
  if location == 0:
    winning_player = first_player
  elif location == 1:
    winning_player = first_player + 1
  elif location == 2:
    winning_player = first_player + 2
  else:
    winning_player= first_player + 3
  if winning_player > 4:
    winning_player = winning_player - 4
  return winning_player

# This function will run the players playing their cards.
def play_cards(first_player, player1, player2, player3, player4):
  cards_played = []
  if first_player == 1:
    cards_played.append(player1.first_play())
    cards_played.append(player2.response_play(cards_played))
    cards_played.append(player3.response_play(cards_played))
    cards_played.append(player4.response_play(cards_played))
  elif first_player == 2:
    cards_played.append(player2.first_play())
    cards_played.append(player3.response_play(cards_played))
    cards_played.append(player4.response_play(cards_played))
    cards_played.append(player1.response_play(cards_played))
  elif first_player == 3:
    cards_played.append(player3.first_play())
    cards_played.append(player4.response_play(cards_played))
    cards_played.append(player1.response_play(cards_played))
    cards_played.append(player2.response_play(cards_played))
  else:
    cards_played.append(player4.first_play())
    cards_played.append(player1.response_play(cards_played))
    cards_played.append(player2.response_play(cards_played))
    cards_played.append(player3.response_play(cards_played))
  return cards_played

# This function will increment the tricks based on winning player, and update first_player
def give_player_trick(winning_player, player1, player2, player3, player4):
  if winning_player == 1:
    player1.add_trick()
    first_player = 1
  elif winning_player == 2:
    player2.add_trick()
    first_player = 2
  elif winning_player == 3:
    player3.add_trick()
    first_player = 3
  else:
    player4.add_trick()
    first_player = 4
  return first_player

# This function determines if the players made their bid, and updates score and informs the user accordingly.
def make_bid(player1, player2, player3, player4):
  if player1.reach_bid():
    player1.add_score()
    print("Player 1 reached their bid.")
  if player2.reach_bid():
    player2.add_score()
    print("Player 2 reached their bid.")
  if player3.reach_bid():
    player3.add_score()
    print("Player 3 reached their bid.")
  if player4.reach_bid():
    player4.add_score()
    print("Player 4 reached their bid.")

# This function will run the 13 cards played.
def play_thirteen_cards(player1, player2, player3, player4):
  rounds = 0
  first_player = 1
  cards_played = []
  while rounds < 13:
    cards_played = play_cards(first_player,player1,player2,player3,player4)
    winning_player = win_trick(first_player, cards_played)
    first_player = give_player_trick(winning_player, player1, player2, player3, player4)
    rounds += 1

# This function will create the hand of the players and inform what those hands are.
def create_and_inform_hand(card_deck, player1, player2, player3, player4):
  # Create the players' hands
  create_hand(player1, card_deck)
  create_hand(player2, card_deck)
  create_hand(player3, card_deck)
  create_hand(player4, card_deck)
  # Print what cards each player has.
  print(print_hand(player1.hand))
  print(print_hand(player2.hand))
  print(print_hand(player3.hand))
  print(print_hand(player4.hand))

# This function will establish and the players' bids.
def create_and_inform_bid(player1, player2, player3, player4):
  # Decide what bid each player should pursue
  player1.decide_bid()
  player2.decide_bid()
  player3.decide_bid()
  player4.decide_bid()
  # Print it to the screen.
  print("Player 1 bid ", player1.bid)
  print("Player 2 bid ", player2.bid)
  print("Player 3 bid ", player3.bid)
  print("Player 4 bid ", player4.bid)

# This function runs a round of spades.
def play_round(player1, player2, player3, player4):
  card_deck = create_card_deck()
  create_and_inform_hand(card_deck, player1, player2, player3, player4)
  create_and_inform_bid(player1, player2, player3, player4)
  play_thirteen_cards(player1,player2,player3,player4)
  # Determine if the players reached their bid.
  make_bid(player1, player2, player3, player4)
  print("Scores:")
  print("Player 1: ", player1.score)
  print("Player 2: ", player2.score)
  print("Player 3: ", player3.score)
  print("Player 4: ", player4.score)

# THis function will reset the players' bids and number of tricks back to 0.
def reset_bid_and_tricks(player1, player2, player3, player4):
  # Reset bids
  player1.bid = 0
  player2.bid = 0
  player3.bid = 0
  player4.bid = 0
  # Reset number of tricks
  player1.number_of_tricks = 0
  player2.number_of_tricks = 0
  player3.number_of_tricks = 0
  player4.number_of_tricks = 0
  # Reset the number of overtricks earned in a round,
  player1.number_of_overtricks = 0
  player2.number_of_overtricks = 0
  player3.number_of_overtricks = 0
  player4.number_of_overtricks = 0

# This function will determine the winner of a game and declare the winner.
def declare_winner(player1, player2, player3, player4):
  if player1.score > 500:
    print("Player 1 won!")
  elif player2. score > 500:
    print("Player 2 won!")
  elif player3.score > 500:
    print("Player 3 won!")
  else:
    print("Player 4 won!")

# Main Function    
def main():
  # Establish objects
  player1 = Player()
  player2 = Player()
  player3 = Player()
  player4 = Player()
  # Establish winning condition, loop until one is reached.
  while (player1.score < 500) and (player2.score < 500) and (player3.score < 500) and (player4.score < 500):
    # Play the cards for the round
    play_round(player1, player2, player3, player4)
    reset_bid_and_tricks(player1, player2, player3, player4)
  declare_winner(player1, player2, player3, player4)

main()
